(()=>{"use strict";var e=document.querySelector(".popup_open-image"),t=(document.querySelector(".popup__image-element"),document.querySelector(".popup__place-title"),document.querySelectorAll(".popup"),document.querySelector(".profile__add")),n=document.querySelector(".popup_add-card"),r=document.querySelector(".profile__edit"),o=document.querySelector(".popup_profile"),i=(document.querySelector(".popup__input_name"),document.querySelector(".profile__title")),u=(document.querySelector(".popup__input_about"),document.querySelector(".profile__subtitle")),c=document.querySelector(".popup__form_profile"),a=(document.querySelector(".popup__input_place"),document.querySelector(".popup__input_link"),document.querySelector(".popup__form_new-card")),s=document.querySelector(".elements__list"),l=document.querySelector(".popup_new-avatar"),f=document.querySelector(".profile__avatar-overlay"),p=document.querySelector(".profile__avatar"),d=document.querySelector(".popup_confirm"),h=document.querySelector(".popup__form_new-avatar"),_={formSelector:".popup__form",inputSelector:".popup__input",submitButtonSelector:".popup__button",inputErrorClass:"popup__input_type_error",errorVisibleClass:"popup__error-visible",host:"https://mesto.nomoreparties.co/v1/cohort-47",token:"f085916c-6915-4c31-bcde-3cb49b2623b6"};function y(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var m=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._host=t,this._token=n,this._getJsonOrError=this._getJsonOrError.bind(this),this._getHeaders=this._getHeaders.bind(this)}var t,n;return t=e,(n=[{key:"_getHeaders",value:function(){return{authorization:this._token,"content-type":"application/json"}}},{key:"_getJsonOrError",value:function(e){if(e.ok)return e.json();throw new Error("Ошибка: ".concat(e.status))}},{key:"getUserInfo",value:function(){return fetch("".concat(this._host,"/users/me"),{headers:this._getHeaders()}).then(this._getJsonOrError)}},{key:"setProfileInfo",value:function(e){return fetch("".concat(this._host,"/users/me"),{method:"PATCH",headers:this._getHeaders(),body:JSON.stringify({name:e.name,about:e.about})}).then(this._getJsonOrError)}},{key:"addNewAvatar",value:function(e){return fetch("".concat(this._host,"/users/me/avatar"),{method:"PATCH",headers:this._getHeaders(),body:JSON.stringify({avatar:e.avatar})}).then(this._getJsonOrError)}},{key:"getCards",value:function(){return fetch("".concat(this._host,"/cards"),{headers:this._getHeaders()}).then(this._getJsonOrError)}},{key:"addCard",value:function(e){return fetch("".concat(this._host,"/cards"),{method:"POST",headers:this._getHeaders(),body:JSON.stringify(e)}).then(this._getJsonOrError)}},{key:"deleteCard",value:function(e){return fetch("".concat(this._host,"/cards/").concat(e._id),{method:"DELETE",headers:this._getHeaders()}).then(this._getJsonOrError)}},{key:"putLike",value:function(e){return fetch("".concat(this._host,"/cards/").concat(e._id,"/likes"),{method:"PUT",headers:this._getHeaders()}).then(this._getJsonOrError)}},{key:"removeLike",value:function(e){return fetch("".concat(this._host,"/cards/").concat(e._id,"/likes"),{method:"DELETE",headers:this._getHeaders()}).then(this._getJsonOrError)}}])&&y(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function v(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var b=function(){function e(t,n,r,o){var i=o.userId,u=o.handleAddLike,c=o.handleRemoveLike,a=o.handleDeletingSubmit;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._name=t.name,this._link=t.link,this._id=i,this._likes=t.likes,this._cardOwnerId=t.owner._id,this._handleAddLike=u,this._handleRemoveLike=c,this._cardSelector=n,this._handleCardClick=r,this._handleDeletingSubmit=a}var t,n;return t=e,(n=[{key:"_getTemplate",value:function(){return document.querySelector(this._cardSelector).content.querySelector(".element").cloneNode(!0)}},{key:"generateCard",value:function(){return this._element=this._getTemplate(),this._imageElement=this._element.querySelector(".element__image"),this._titleImageElement=this._element.querySelector(".element__title"),this._cardDeleteButton=this._element.querySelector(".element__delete"),this._cardLikeButton=this._element.querySelector(".element__like"),this._likeAmount=this._element.querySelector(".element__like-amount"),this._cardImage=this._element.querySelector(".element__image"),this._imageElement.src=this._link,this._imageElement.alt=this._name,this._titleImageElement.textContent=this._name,this._id===this._cardOwnerId&&this._cardDeleteButton.classList.add("element__delete_visible"),this.sumUpLikes(this._likes),this._handleLikeClick(),this._setEventListeners(),this._element}},{key:"sumUpLikes",value:function(e){this._likeAmount.textContent=e.length}},{key:"_handleLikeClick",value:function(){var e=this;this._likes.forEach((function(t){e._id===t._id&&e._cardLikeButton.classList.toggle("element__like_active")}))}},{key:"likeAdded",value:function(){this._cardLikeButton.classList.add("element__like_active")}},{key:"likeCanceled",value:function(){this._cardLikeButton.classList.remove("element__like_active")}},{key:"delete",value:function(){this._element.remove(),this._element=null}},{key:"_setEventListeners",value:function(){var e=this;this._cardImage.addEventListener("click",(function(){e._handleCardClick(e._name,e._link)})),this._cardDeleteButton.addEventListener("click",(function(){e._handleDeletingSubmit(e)})),this._cardLikeButton.addEventListener("click",(function(){e._cardLikeButton.classList.contains("element__like_active")?e._handleRemoveLike():e._handleAddLike()}))}}])&&v(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function g(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var k=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._formElement=t,this._config=n,this._inputList=Array.from(t.querySelectorAll(this._config.inputSelector)),this._submitButtonElement=t.querySelector(this._config.submitButtonSelector)}var t,n;return t=e,(n=[{key:"_hideInputError",value:function(e){var t=this._formElement.querySelector("#".concat(e.id,"-error"));e.classList.remove(this._config.inputErrorClass),t.classList.remove(this._config.errorVisibleClass),t.textContent=""}},{key:"_showInputError",value:function(e,t){var n=this._formElement.querySelector("#".concat(e.id,"-error"));e.classList.add(this._config.inputErrorClass),n.textContent=t,n.classList.add(this._config.errorVisibleClass)}},{key:"_checkInputValidity",value:function(e){e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)}},{key:"_hasInvalidInput",value:function(){return this._inputList.some((function(e){return!e.validity.valid}))}},{key:"_toggleButtonState",value:function(){this._hasInvalidInput()?this._submitButtonElement.disabled=!0:this._submitButtonElement.disabled=!1}},{key:"disabledSubmitButton",value:function(){this._submitButtonElement.disabled=!0}},{key:"_setEventListeners",value:function(){var e=this;this._inputList.forEach((function(t){t.addEventListener("input",(function(){e._checkInputValidity(t),e._toggleButtonState()}))}))}},{key:"resetValidation",value:function(){var e=this;this._toggleButtonState(),this._inputList.forEach((function(t){e._hideInputError(t)}))}},{key:"enableValidation",value:function(){this._setEventListeners()}}])&&g(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function w(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var E=function(){function e(t,n){var r=t.renderer;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._renderer=r,this._container=n}var t,n;return t=e,(n=[{key:"setItems",value:function(e){this._renderedItems=e}},{key:"addItem",value:function(e){this._container.prepend(e)}},{key:"renderItem",value:function(){var e=this;this._renderedItems.forEach((function(t){e._renderer(t)}))}}])&&w(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function S(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var O=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._popup=t,this._handleEscClose=this._handleEscClose.bind(this)}var t,n;return t=e,(n=[{key:"open",value:function(){this._popup.classList.add("popup_opened"),document.addEventListener("keydown",this._handleEscClose)}},{key:"close",value:function(){this._popup.classList.remove("popup_opened"),document.removeEventListener("keydown",this._handleEscClose)}},{key:"_handleEscClose",value:function(e){"Escape"===e.key&&this.close()}},{key:"setEventListeners",value:function(){var e=this;this._popup.addEventListener("mousedown",(function(t){(t.target.classList.contains("popup_opened")||t.target.classList.contains("popup__close"))&&e.close()}))}}])&&S(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function L(e){return L="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},L(e)}function j(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function C(){return C="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,n){var r=I(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},C.apply(this,arguments)}function I(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=A(e)););return e}function P(e,t){return P=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},P(e,t)}function q(e,t){if(t&&("object"===L(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function A(e){return A=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},A(e)}var B=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&P(e,t)}(u,e);var t,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=A(r);if(o){var n=A(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return q(this,e)});function u(e,t){var n,r=t.submitForm;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(n=i.call(this,e))._form=n._popup.querySelector(".popup__form"),n._inputs=n._form.querySelectorAll(".popup__input"),n._submitForm=r,n._cardSubmitButton=n._popup.querySelector(".popup__button"),n._cardSubmitButtonContent=n._cardSubmitButton.textContent,n}return t=u,(n=[{key:"_getInputValues",value:function(){var e={};return this._inputs.forEach((function(t){e[t.name]=t.value})),e}},{key:"setInputValues",value:function(e){this._inputs.forEach((function(t){t.value=e[t.name]}))}},{key:"downloadInfo",value:function(e,t){var n=this;e?this._cardSubmitButton.textContent=t:setTimeout((function(){n._cardSubmitButton.textContent=n._cardSubmitButtonContent}),600)}},{key:"setEventListeners",value:function(){var e=this;C(A(u.prototype),"setEventListeners",this).call(this),this._form.addEventListener("submit",(function(t){t.preventDefault(),e._submitForm(e._getInputValues())}))}},{key:"close",value:function(){C(A(u.prototype),"close",this).call(this),this._form.reset()}}])&&j(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),u}(O);function R(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var T=function(){function e(t){var n=t.userName,r=t.userAbout,o=t.userAvatar;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._name=n,this._about=r,this._avatar=o}var t,n;return t=e,(n=[{key:"getUserInfo",value:function(){return{name:this._name.textContent,about:this._about.textContent,avatar:this._avatar.src}}},{key:"setUserInfo",value:function(e){this._name.textContent=e.name,this._about.textContent=e.about,this._avatar.src=e.avatar}}])&&R(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function x(e){return x="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},x(e)}function D(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function V(){return V="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,n){var r=J(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},V.apply(this,arguments)}function J(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=F(e)););return e}function U(e,t){return U=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},U(e,t)}function H(e,t){if(t&&("object"===x(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function F(e){return F=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},F(e)}var N=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&U(e,t)}(u,e);var t,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=F(r);if(o){var n=F(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return H(this,e)});function u(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(t=i.call(this,e))._name=t._popup.querySelector(".popup__place-title"),t._link=t._popup.querySelector(".popup__image-element"),t}return t=u,(n=[{key:"open",value:function(e,t){this._link.src=t,this._link.alt=e,this._name.textContent=e,V(F(u.prototype),"open",this).call(this)}}])&&D(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),u}(O);function M(e){return M="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},M(e)}function z(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function $(){return $="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,n){var r=G(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},$.apply(this,arguments)}function G(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=W(e)););return e}function K(e,t){return K=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},K(e,t)}function Q(e,t){if(t&&("object"===M(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function W(e){return W=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},W(e)}var X,Y=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&K(e,t)}(u,e);var t,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=W(r);if(o){var n=W(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return Q(this,e)});function u(e,t){var n,r=t.submitForm;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(n=i.call(this,e))._form=n._popup.querySelector(".popup__form"),n._submitForm=r,n}return t=u,(n=[{key:"setSubmitAction",value:function(e){var t=e.handleSubmitAction;this.submitAction=t}},{key:"open",value:function(e){$(W(u.prototype),"open",this).call(this),this._card=e}},{key:"setEventListeners",value:function(){var e=this;$(W(u.prototype),"setEventListeners",this).call(this),this._form.addEventListener("submit",(function(t){t.preventDefault(),e._submitForm(e._card)}))}}])&&z(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),u}(O);function Z(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var ee=new m(_.host,_.token);Promise.all([ee.getUserInfo(),ee.getCards()]).then((function(e){var t,n,r=(n=2,function(e){if(Array.isArray(e))return e}(t=e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],u=!0,c=!1;try{for(n=n.call(e);!(u=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{u||null==n.return||n.return()}finally{if(c)throw o}}return i}}(t,n)||function(e,t){if(e){if("string"==typeof e)return Z(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Z(e,t):void 0}}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=r[0],i=r[1];X=o._id,te.setUserInfo(o),ie.setItems(i),ie.renderItem(i)})).catch((function(e){return console.log("Ошибка: ".concat(e))}));var te=new T({userName:i,userAbout:u,userAvatar:p}),ne=new B(o,{submitForm:function(e){ne.downloadInfo(!0,"Сохранение..."),ee.setProfileInfo(e).then((function(e){te.setUserInfo(e),ne.close()})).catch((function(e){return console.log("Ошибка: ".concat(e))})).finally((function(){return ne.downloadInfo(!1)}))}});ne.setEventListeners(),r.addEventListener("click",(function(){ne.open();var e=te.getUserInfo();ne.setInputValues(e),le.resetValidation(),le.disabledSubmitButton()}));var re=new B(l,{submitForm:function(e){re.downloadInfo(!0,"Сохранение..."),ee.addNewAvatar(e).then((function(e){te.setUserInfo(e),re.close()})).catch((function(e){return console.log("Ошибка: ".concat(e))})).finally((function(){return ne.downloadInfo(!1)}))}});re.setEventListeners(),f.addEventListener("click",(function(){re.open(),pe.resetValidation()}));var oe=function(e){var t=new b(e,".element-template",se,{userId:X,handleDeletingSubmit:function(){ce.open(e),ce.setSubmitAction({handleSubmitAction:function(){ee.deleteCard(e).then((function(){ce.close(),t.delete()})).catch((function(e){return console.log("Ошибка: ".concat(e))}))}})},handleAddLike:function(){ee.putLike(e).then((function(e){t.sumUpLikes(e.likes),t.likeAdded()})).catch((function(e){return console.log("Ошибка: ".concat(e))}))},handleRemoveLike:function(){ee.removeLike(e).then((function(e){t.sumUpLikes(e.likes),t.likeCanceled()})).catch((function(e){return console.log("Ошибка: ".concat(e))}))}});return t.generateCard()},ie=new E({renderer:function(e){var t=oe(e);ie.addItem(t)}},s),ue=new B(n,{submitForm:function(e){ue.downloadInfo(!0,"Сохранение..."),ee.addCard(e).then((function(e){var t=oe(e);ie.addItem(t),ue.close()})).catch((function(e){return console.log("Ошибка: ".concat(e))})).finally((function(){return ne.downloadInfo(!1)}))}});ue.setEventListeners(),t.addEventListener("click",(function(){ue.open(),fe.resetValidation()}));var ce=new Y(d,{submitForm:function(){return ce.submitAction()}});ce.setEventListeners();var ae=new N(e);ae.setEventListeners();var se=function(e,t){ae.open(e,t)},le=new k(c,_),fe=new k(a,_),pe=new k(h,_);le.enableValidation(),fe.enableValidation(),pe.enableValidation()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,